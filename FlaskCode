import os
import pandas as pd
import numpy as np
from flask import Flask, request, render_template
from sklearn.ensemble import RandomForestClassifier
import nltk
import matplotlib.pyplot as plt

app = Flask(__name__)

class train_model:
    def __init__(self):
        self.rf = RandomForestClassifier(n_estimators=100, random_state=42)

    def train(self):
        data = pd.read_csv('dataset.csv')
        array = data.values

        for i in range(len(array)):
            if array[i][0] == "Male":
                array[i][0] = 1
            else:
                array[i][0] = 0

        df = pd.DataFrame(array)

        maindf = df[[0,1,2,3,4,5,6]]
        mainarray = maindf.values

        temp = df[7]
        train_y = temp.values

        self.rf.fit(mainarray, train_y)

    def test(self, test_data):
        try:
            test_predict = []
            for i in test_data:
                test_predict.append(int(i))
            y_pred = self.rf.predict([test_predict])
            return y_pred
        except:
            print("All Factors For Finding Personality Not Entered!")

    def check_type(data):
        if type(data) == str or type(data) == str:
            return str(data).title()
        if type(data) == list or type(data) == tuple:
            str_list = ""
            for i,item in enumerate(data):
                str_list += item+", "
            return str_list
        else:
            return str(data)

def create_scatter_plot(x_values, y_values):
    plt.scatter(x_values, y_values)
    plt.xlabel('Personality Traits')
    plt.ylabel('Predicted Values')
    plt.title('Personality Prediction')
    plt.show()

@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        candidate_name = request.form['name']
        age = request.form['age']
        gender = request.form['gender']
        openness = request.form['openness']
        conscientiousness = request.form['conscientiousness']
        extraversion = request.form['extraversion']
        agreeableness = request.form['agreeableness']
        neuroticism = request.form['neuroticism']

        model = train_model()
        model.train()
        personality_values = [gender, age, openness, conscientiousness, extraversion, agreeableness, neuroticism]
        prediction = model.test(personality_values)

        create_scatter_plot([1,2,3,4,5,6,7], personality_values + [prediction[0]])

        return render_template('index.html', prediction=prediction[0])
    else:
        return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
